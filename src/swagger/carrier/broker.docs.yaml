paths:
 /carrier/brokers:
    get:  
      tags: [Brokers]
      security:
        - bearerAuth: []
      summary: Retrieve multiple brokers
      description: Fetches a paginated list of brokers based on query parameters.
      parameters:
        - name: page_number
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          description: Number of brokers per page.
          required: false
          schema:
            type: integer
            default: 10
        - name: name
          in: query
          description: Filter by broker name.
          required: false
          schema:
            type: string
        - name: mc
          in: query
          description: Filter by broker MC number.
          required: false
          schema:
            type: string
        - name: score
          in: query
          description: Filter by broker score.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully retrieved the accidents.
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  page_size: 
                    type: integer
                    example: 10
                  page_number:
                    type: integer
                    example: 1
                  total_pages:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Broker'
    post:
      tags: [Brokers]
      security:
        - bearerAuth: []
      summary: Register a new broker
      description: Validates the new broker's data, then registers them in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrokerCreate'
      responses:
        201:
          description: Broker is registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    description: The id of the new broker.
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
 /carrier/brokers/{broker_id}:
    get:
      tags: [Brokers]
      security:
        - bearerAuth: []
      summary: Retrieve a single broker
      description: Fetches a single broker by ID.
      parameters:
        - name: broker_id
          in: path
          description: ID of the broker to retrieve.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Successfully retrieved the broker.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broker'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Brokers]
      security:
        - bearerAuth: []
      summary: Update a single broker
      description: Updates details of a single broker by ID.
      parameters:
        - name: broker_id
          in: path
          description: ID of the broker to update.
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrokerUpdate'
      responses:
        200:
          description: Successfully updated the broker.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Broker with ID updated successfully
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Brokers]
      security:
        - bearerAuth: []
      summary: Delete a single broker
      description: Deletes a single broker by ID.
      parameters:
        - name: broker_id
          in: path
          description: ID of the broker to delete.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Successfully deleted the broker.
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
