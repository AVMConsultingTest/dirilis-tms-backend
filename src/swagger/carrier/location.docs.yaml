paths:
 /carrier/locations:
    get:  
      tags: [Locations]
      security:
        - bearerAuth: []
      summary: Retrieve multiple locations
      description: Fetches a paginated list of locations based on query parameters.
      parameters:
        - name: page_number
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          description: Number of locations per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Successfully retrieved the locations.
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  pageSize: 
                    type: integer
                    example: 10
                  pageNumber:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ILocationSwagger'
    post:
      tags: [Locations]
      security:
        - bearerAuth: []
      summary: Create a new location
      description: Validates the new location's data, then creates an entry in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ILocationCreateSwagger'
      responses:
        201:
          description: Location is created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    description: The id of new location.
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
 /carrier/locations/search/{location_name}:
    get:
      tags: [Locations]
      security:
        - bearerAuth: []
      summary: Retrieve multiple locations by name
      description: Fetches a paginated list of locations based on query parameters.
      parameters:
        - name: location_name
          in: path
          description: Name of the location to search for.
          required: true
          schema:
            type: string
            example: 'Amazon'
      responses:
        200:
          description: Successfully retrieved the locations.
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ILocationSwagger'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
 /carrier/locations/{location_id}:
    get:
      tags: [Locations]
      security:
        - bearerAuth: []
      summary: Retrieve a single location
      description: Fetches a single location by ID.
      parameters:
        - name: location_id
          in: path
          description: ID of the location to retrieve.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Successfully retrieved the location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ILocationSwagger'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [Locations]
      security:
        - bearerAuth: []
      summary: Update a single location
      description: Updates a single location by ID.
      parameters:
        - name: location_id
          in: path
          description: ID of the location to update.
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ILocationUpdateSwagger'
      responses:
        200:
          description: Successfully updated the location.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Location with ID updated successfully
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Locations]
      security:
        - bearerAuth: []
      summary: Delete a single location
      description: Deletes a single location by ID.
      parameters:
        - name: location_id
          in: path
          description: ID of the location to delete.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Successfully deleted the location.
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'